////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

#include "/Engine/Private/Common.ush"

#ifndef RUL_ENABLE_VERTEX_COLOR
#define RUL_ENABLE_VERTEX_COLOR 0
#endif

Buffer<float4> QuadGeomData;
Buffer<float4> QuadTransformData;

float4 _DrawScaleBias;

void DrawScreenVS(
    in float4 InPosUV : ATTRIBUTE0,
	out FScreenVertexOutput Output
	)
{
	Output.Position = float4(InPosUV.xy * float2(1, -1), 0, 1);
    Output.UV = InPosUV.zw;
}

void DrawGeometryVS(
	in float3 Position : ATTRIBUTE0,
#if RUL_ENABLE_VERTEX_COLOR
    in float4 InColor : ATTRIBUTE1,
#endif
	out noperspective MaterialFloat4 OutColor : COLOR0,
	out float4 OutPos : SV_POSITION
	)
{
    float2 pos = Position.xy*_DrawScaleBias.xy + _DrawScaleBias.zw;
    OutPos = float4(pos.x, -pos.y, 0, 1);

#if RUL_ENABLE_VERTEX_COLOR
    OutColor = InColor;
#else
    OutColor = float4(Position.zzz, 1.0);
#endif
}

void DrawGeometryPS(
	in MaterialFloat4 InColor : COLOR0,
	out float4 OutColor : SV_Target0
	)
{
    OutColor = InColor;
}

void DrawQuadVS(
    in float4 InPosUV  : ATTRIBUTE0,
	in uint InstanceId : SV_InstanceID,
	out noperspective MaterialFloat4 OutColor : COLOR0,
	out FScreenVertexOutput Output
	)
{
    const float4 QuadGeom = QuadGeomData[InstanceId];
    const float4 QuadTransform = QuadTransformData[InstanceId];

    float2   rot = { cos(QuadTransform.y), sin(QuadTransform.y) };
    float2x2 mat = {
         rot.x, rot.y,
        -rot.y, rot.x
        };

    float2 pos = QuadGeom.xy + mul(InPosUV.xy * QuadGeom.zw * QuadTransform.x, mat);

	Output.Position = float4(pos * float2(1, -1), 0, 1);
    Output.UV = InPosUV.zw;
    OutColor = QuadTransform.z;
}

void DrawPolyVS(
    in float4 InPosLumMask : ATTRIBUTE0,
	out noperspective MaterialFloat4 OutColor : COLOR0,
	out FScreenVertexOutput Output
	)
{
	Output.Position = float4(InPosLumMask.xy * float2(1, -1), 0, 1);
    Output.UV = InPosLumMask.zw;
    OutColor = InPosLumMask.z;
}
