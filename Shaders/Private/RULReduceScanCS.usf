////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

#define BLOCK_SIZE  128
#define BLOCK_SIZE2 256

#define TEX_BLOCK  8
#define TEX_BLOCK2 16

#define GROUPSHARED_SIZE BLOCK_SIZE2

#define GET_GLOBAL_IDX tid.x
#define GET_LOCAL_IDX  lid.x
#define GET_GROUP_IDX  gid.x
#define GROUP_LDS_BARRIER GroupMemoryBarrierWithGroupSync()

#define TEX_HALF_STRIDE _Dimension.z

#ifndef data_t
#define data_t uint
#endif

#ifndef REDUCE_OP

#if REDUCE_OP_MAX
#define REDUCE_OP(ValueA, ValueB) max(ValueA, ValueB)
#elif REDUCE_OP_MIN
#define REDUCE_OP(ValueA, ValueB) min(ValueA, ValueB)
#else
#define REDUCE_OP(ValueA, ValueB) max(ValueA, ValueB)
#endif

#endif // REDUCE_OP

#ifndef TOP_LEVEL_SCAN_APPEND_SUM_TO_DATA
#define TOP_LEVEL_SCAN_APPEND_SUM_TO_DATA 0
#endif

uint4 _Dimension;
uint _ElementCount;
uint _BlockCount;
uint _ScanBlockCount;
uint _ResultIndex;

Texture2D<float4> SourceTexture;
StructuredBuffer<data_t> SrcData;
RWStructuredBuffer<data_t> SumData;

groupshared data_t ldsData[GROUPSHARED_SIZE];

data_t ScanExclusiveBlock(uint n, uint lIdx)
{
    uint  offset;
    uint  nActive;
    uint2 lid = (2*lIdx) + uint2(1, 2);

    //[unroll]
    for (nActive=n>>1, offset=1; nActive>0; nActive>>=1, offset<<=1)
    {
        GROUP_LDS_BARRIER;
        if (lIdx < nActive)
        {
            uint2 oid = offset*lid-1;
            ldsData[oid.y] = REDUCE_OP(ldsData[oid.y], ldsData[oid.x]);
        }
    }

    GROUP_LDS_BARRIER;

    return ldsData[n-1];
}

[numthreads(BLOCK_SIZE,1,1)]
void LocalScanKernel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    uint gIdx = GET_GLOBAL_IDX;
    uint lIdx = GET_LOCAL_IDX;

    uint2 gidx01 = (2*gIdx) + uint2(0,1);
    uint2 lidx01 = (2*lIdx) + uint2(0,1);

    ldsData[lidx01.x] = (gidx01.x < _ElementCount) ? SrcData[gidx01.x] : 0;
    ldsData[lidx01.y] = (gidx01.y < _ElementCount) ? SrcData[gidx01.y] : 0;

    data_t sum = ScanExclusiveBlock(BLOCK_SIZE2, lIdx);

    if (lIdx == 0)
    {
        SumData[GET_GROUP_IDX] = sum;
    }
}

//[numthreads(TEX_BLOCK,TEX_BLOCK2,1)]
[numthreads(BLOCK_SIZE,1,1)]
void TextureLocalScanKernel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
#if 0
    uint lIdx = lid.x + lid.y * TEX_BLOCK;

    uint gx = 2 * tid.x;
    uint gy = tid.y;

    uint2 gid0 = uint2(gx  , gy);
    uint2 gid1 = uint2(gx+1, gy);

    uint gidx0 = gid0.x + gid0.y * _Dimension.x;
    uint gidx1 = gid1.x + gid1.y * _Dimension.x;

    uint lidx0 = 2 * lid.x + lid.y * TEX_BLOCK2;
    uint lidx1 = lidx0 + 1;

    ldsData[lidx0] = all(gid0<_Dimension.xy) ? SourceTexture[gid0] : 0;
    ldsData[lidx1] = all(gid1<_Dimension.xy) ? SourceTexture[gid1] : 0;

    data_t sum = ScanExclusiveBlock(BLOCK_SIZE2, lIdx);
#else
    uint gIdx = GET_GLOBAL_IDX;
    uint lIdx = GET_LOCAL_IDX;

    uint gx = 2 * (gIdx % TEX_HALF_STRIDE);
    uint gy = gIdx / TEX_HALF_STRIDE;

    uint2 gidx0 = uint2(gx  , gy);
    uint2 gidx1 = uint2(gx+1, gy);

    uint2 lidx01 = (2*lIdx) + uint2(0,1);

    ldsData[lidx01.x] = all(gidx0<_Dimension.xy) ? SourceTexture[gidx0] : 0;
    ldsData[lidx01.y] = all(gidx1<_Dimension.xy) ? SourceTexture[gidx1] : 0;

    data_t sum = ScanExclusiveBlock(BLOCK_SIZE2, lIdx);
#endif

    if (lIdx == 0)
    {
        SumData[GET_GROUP_IDX] = sum;
    }
}

[numthreads(BLOCK_SIZE,1,1)]
void TopLevelScanKernel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    uint gIdx = GET_GLOBAL_IDX;
    uint lIdx = GET_LOCAL_IDX;

    uint2 gidx01 = (2*gIdx) + uint2(0,1);
    uint2 lidx01 = (2*lIdx) + uint2(0,1);

    ldsData[lidx01.x] = (gidx01.x < _BlockCount) ? SumData[gidx01.x] : 0;
    ldsData[lidx01.y] = (gidx01.y < _BlockCount) ? SumData[gidx01.y] : 0;

    GROUP_LDS_BARRIER;

    data_t sum = ScanExclusiveBlock(_ScanBlockCount, lIdx);

    if (gidx01.x < _BlockCount)
    {
        SumData[gidx01.x] = ldsData[lidx01.x];
    }

    if (gidx01.y < _BlockCount)
    {
        SumData[gidx01.y] = ldsData[lidx01.y];
    }

    if (gIdx == 0)
    {
        SumData[_ScanBlockCount] = sum;
    }
}

[numthreads(1,1,1)]
void WriteScanResultKernel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    SumData[_ResultIndex] = SrcData[_ElementCount-1];
}

[numthreads(TEX_BLOCK,TEX_BLOCK2,1)]
//[numthreads(BLOCK_SIZE,1,1)]
//[numthreads(BLOCK_SIZE2,1,1)]
void WriteTextureValueKernel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    {
        uint gx = 2 * tid.x;
        uint gy = tid.y;

        uint2 gid0 = uint2(gx  , gy);
        uint2 gid1 = uint2(gx+1, gy);

        uint gidx0 = gid0.x + gid0.y * _Dimension.x;
        uint gidx1 = gid1.x + gid1.y * _Dimension.x;

        uint lidx0 = 2 * lid.x + lid.y * TEX_BLOCK2;
        uint lidx1 = lidx0 + 1;

        ldsData[lidx0] = all(gid0<_Dimension.xy) ? SourceTexture[gid0] : 0;
        ldsData[lidx1] = all(gid1<_Dimension.xy) ? SourceTexture[gid1] : 0;

        if (all(gid0<_Dimension.xy))
        {
            SumData[gidx0] = ldsData[lidx0];
        }

        if (all(gid1<_Dimension.xy))
        {
            SumData[gidx1] = ldsData[lidx1];
        }
    }

    //{
    //    uint gIdx = GET_GLOBAL_IDX;

    //    uint gx = 2 * (gIdx % TEX_HALF_STRIDE);
    //    uint gy = gIdx / TEX_HALF_STRIDE;

    //    uint2 gidx0 = uint2(gx  , gy);
    //    uint2 gidx1 = uint2(gx+1, gy);

    //    SumData[2*gIdx  ] = all(gidx0<_Dimension.xy) ? SourceTexture[gidx0] : 0;
    //    SumData[2*gIdx+1] = all(gidx1<_Dimension.xy) ? SourceTexture[gidx1] : 0;
    //}

    //{
    //    uint gIdx = GET_GLOBAL_IDX;
    //    uint gx = gIdx % _Dimension.x;
    //    uint gy = gIdx / _Dimension.x;
    //    SumData[GET_GLOBAL_IDX] = SourceTexture[uint2(gx, gy)];
    //}
}
